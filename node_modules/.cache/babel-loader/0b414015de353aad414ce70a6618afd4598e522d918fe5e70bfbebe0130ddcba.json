{"ast":null,"code":"var _jsxFileName = \"G:\\\\Development\\\\React\\\\First Demo App\\\\src\\\\App.js\";\nimport { useState } from \"react\";\nimport Form from \"./Components/Form/Form\";\nimport Header from \"./Components/Header/Header\";\nimport Result from \"./Components/Result/Result\";\nimport logo from './assets/investment-calculator-logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const [inputValue, setInputValue] = () => {};\n\n  // do something with yearlyData ...\n}\n_c = App;\n;\nconst calculateHandler = userInput => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput['expected-return'] / 100;\n  const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n    setInputValue(yearlyData);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      image: logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      calculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Result, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Form","Header","Result","logo","jsxDEV","_jsxDEV","App","inputValue","setInputValue","_c","calculateHandler","userInput","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","yearlyData","push","year","savingsEndOfYear","children","image","fileName","_jsxFileName","lineNumber","columnNumber","calculate","$RefreshReg$"],"sources":["G:/Development/React/First Demo App/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Form from \"./Components/Form/Form\";\nimport Header from \"./Components/Header/Header\";\nimport Result from \"./Components/Result/Result\";\nimport logo from './assets/investment-calculator-logo.png';\nfunction App() {\n\n  const [inputValue,setInputValue]=()=>{\n    \n  };\n\n\n    // do something with yearlyData ...\n  };\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    \n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n      setInputValue(yearlyData)\n    }\n\n    \n\n  \n\n  return (\n    <div>\n     <Header image={logo}/>\n     <Form calculate={calculateHandler}/>\n     <Result/>\n     \n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,IAAI,MAAM,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC3D,SAASC,GAAGA,CAAA,EAAG;EAEb,MAAM,CAACC,UAAU,EAACC,aAAa,CAAC,GAAC,MAAI,CAErC,CAAC;;EAGC;AACF;AAACC,EAAA,GARMH,GAAG;AAQT;AAED,MAAMI,gBAAgB,GAAIC,SAAS,IAAK;EACtC;EACA;;EAIA,IAAIC,cAAc,GAAG,CAACD,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAME,kBAAkB,GAAG,CAACF,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMG,cAAc,GAAG,CAACH,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMI,QAAQ,GAAG,CAACJ,SAAS,CAAC,UAAU,CAAC;;EAEvC;EACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;IACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;IACrDK,UAAU,CAACC,IAAI,CAAC;MACd;MACAC,IAAI,EAAEJ,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAC9BI,gBAAgB,EAAET,cAAc;MAChCC,kBAAkB,EAAEA;IACtB,CAAC,CAAC;IACFL,aAAa,CAACU,UAAU,CAAC;EAC3B;EAMF,oBACEb,OAAA;IAAAiB,QAAA,gBACCjB,OAAA,CAACJ,MAAM;MAACsB,KAAK,EAAEpB;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACtBtB,OAAA,CAACL,IAAI;MAAC4B,SAAS,EAAElB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACpCtB,OAAA,CAACH,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAML,CAAC;AAEV,CAAC;AAED,eAAerB,GAAG;AAAC,IAAAG,EAAA;AAAAoB,YAAA,CAAApB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}